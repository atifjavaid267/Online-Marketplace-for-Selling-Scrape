<div class="bg-cover  h-full" style="background-image: url('https://images.unsplash.com/photo-1475275083424-b4ff81625b60?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1472&q=80');">
  <div class = "pt-5 mx-12" style="display: flex; justify-content: center; align-items: center;">
    <div class="p-5 flex flex-col items-center justify-center mx-12 px-5 my-10 w-full h-4/5 max-w-sm bg-white border border-black-200 rounded-lg shadow sm:p-30 md:p-30 dark:bg-gray-800 border-transparent">
      <div class="flex flex-col items-center justify-between space-y-5 ">
        <h3 class="font-bold">New Address</h3>
        <%= form_with(model: @address, local: true) do |form| %>
          <div class="field ">
            <div class="card bg-white p-4 rounded-lg shadow-md">
              <div class="form-group mb-4">
                <%= form.label :street1, class: "font-bold mb-2 block" %>
                <%= form.text_field :street1, class: "form-control w-full py-2 px-3 text-gray-700 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent" %>
              </div>

              <div class="form-group mb-4">
                <%= form.label :street2, class: "font-bold mb-2 block" %>
                <%= form.text_field :street2, class: "form-control w-full py-2 px-3 text-gray-700 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent" %>
              </div>

              <div class="form-group mb-4">
                <%= form.label :city, class: "font-bold mb-2 block" %>
                <%= form.text_field :city, class: "form-control w-full py-2 px-3 text-gray-700 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent" %>
              </div>

              <div class="form-group mb-4">
                <%= form.label :state, class: "font-bold mb-2 block" %>
                <%= form.text_field :state, class: "form-control w-full py-2 px-3 text-gray-700 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent" %>
              </div>

              <div class="form-group mb-4">
                <%= form.label :zip_code, class: "font-bold mb-2 block" %>
                <%= form.text_field :zip_code, class: "form-control w-full py-2 px-3 text-gray-700 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent" %>
              </div>
              <div class="flex-col">
                <div>
                  <input id="pac-input" class="controls" type="text" placeholder="Search Location">
                </div>
                <div>
                  <button onclick="searchLocation()" class="bg-blue-600 hover:bg-blue-800 p-2 my-2 rounded-md text-white font-bold">Search</button>
                </div>
              </div>
              <div id="map" class="w-80 h-80"></div>
                <div class="actions flex items-center flex-row justify-center">
                  <%= form.submit "Submit", class: " mt-5 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
                </div>
              </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
var geocoder;
var map;
var marker;
var input = document.getElementById('pac-input');

function initMap() {
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 6,
    center: {lat: 30.3753, lng: 69.3451},
    zoomControl: true
  });
  marker = new google.maps.Marker({
    position: {lat: 30.3753, lng: 69.3451},
    map: map,
    draggable: true
  });

  google.maps.event.addListener(map, "click", function (event) {
    marker.setPosition(event.latLng);
    map.panTo(event.latLng);
  });

  google.maps.event.addListener(marker, "dragend", function (event) {
    geocodeLatLng(event.latLng);
    map.panTo(event.latLng);
  });

  geocoder = new google.maps.Geocoder();
  var autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo('bounds', map);

  autocomplete.addListener('place_changed', function() {
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      alert("No details available for input: " + place.name );
      return;
    }

    map.setCenter(place.geometry.location);
    marker.setPosition(place.geometry.location);
    map.setZoom(18);

    var address_components = place.address_components;
    var street_number = "";
    var route = "";
    var city = "";
    var state = "";
    var zip_code = "";
    for (var i = 0; i < address_components.length; i++) {
      var component = address_components[i];
      if (component.types.includes("street_number")) {
        street_number = component.long_name;
      } else if (component.types.includes("route")) {
        route = component.long_name;
      } else if (component.types.includes("locality")) {
        city = component.long_name;
      } else if (component.types.includes("administrative_area_level_1")) {
        state = component.long_name;
      } else if (component.types.includes("postal_code")) {
        zip_code = component.long_name;
      }
    }
    document.getElementById("address_street1").value = street_number + " " + route;
    document.getElementById("address_city").value = city;
    document.getElementById("address_state").value = state;
    document.getElementById("address_zip_code").value = zip_code;

    var address = {
      street1: street_number + " " + route,
      city: city,
      state: state,
      zip_code: zip_code
    };


    document.getElementById("address_street2").value = "";
    document.getElementById("map").focus();
    console.log(address);

  });
}
function geocodeLatLng(latlng) {
  geocoder.geocode({ 'location': latlng }, function(results, status) {
    if (status === 'OK') {
      if (results[0]) {

        var address_components = results[0].address_components;
        var street_number = "";
        var route = "";
        var city = "";
        var state = "";
        var zip_code = "";
        for (var i = 0; i < address_components.length; i++) {
          var component = address_components[i];
          if (component.types.includes("street_number")) {
            street_number = component.long_name;
          } else if (component.types.includes("route")) {
            route = component.long_name;
          } else if (component.types.includes("locality")) {
            city = component.long_name;
          } else if (component.types.includes("administrative_area_level_1")) {
            state = component.long_name;
          } else if (component.types.includes("postal_code")) {
            zip_code = component.long_name;
          }
        }
        document.getElementById("address_street1").value = street_number + " " + route;
        document.getElementById("address_city").value = city;
        document.getElementById("address_state").value = state;
        document.getElementById("address_zip_code").value = zip_code;

        var address = {
          street1: street_number + " " + route,
          city: city,
          state: state,
          zip_code: zip_code
        };
        
        document.getElementById("address_street2").value = ""; 
        console.log(address); 

      } else {
        window.alert('No results found');
      }
    } else {
      window.alert('Geocoder failed due to: ' + status);
    }
  });
}
</script><script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC3JUhLERQ9GxZnC4OHjA_AzieuJlcW6Is&libraries=places&callback=initMap"></script>
